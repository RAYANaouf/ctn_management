[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-30 16:55:17.269796",
  "module": "POS AR",
  "name": "auto-order",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Order",
  "script": "# Get Supplier info\r\nsupplier_doc = frappe.get_doc(\"Supplier\", doc.supplier)\r\nfrappe.log_error(doc.custom_generate_order)\r\n\r\nif doc.custom_generate_order == 1 :\r\n    # Proceed only if it's an internal supplier with a target company\r\n    if supplier_doc.is_internal_supplier and supplier_doc.represents_company:\r\n        target_company = supplier_doc.represents_company  # the selling company\r\n        buying_company = doc.company                      # the buying company\r\n\r\n        # Get the internal customer representing the buying company\r\n        customer_name = frappe.db.get_value(\r\n            \"Customer\",\r\n            {\"is_internal_customer\": 1, \"represents_company\": buying_company},\r\n            \"name\"\r\n        )\r\n        if not customer_name:\r\n            frappe.throw(f\"No internal customer found representing company '{buying_company}'.\")\r\n\r\n        # Get default warehouse from target company (if set)\r\n        default_warehouse = frappe.db.get_value(\"Company\", target_company, \"custom_default_warehouse\")\r\n\r\n        # --- build the mirror Sales Order ---\r\n        so = frappe.new_doc(\"Sales Order\")\r\n        so.customer           = customer_name\r\n        so.company            = target_company\r\n        so.selling_price_list = \"TP - Alger\"\r\n        so.transaction_date   = doc.transaction_date\r\n        so.delivery_date      = frappe.utils.add_days(doc.transaction_date, 7)\r\n    \r\n        # Link the SO to the source PO (header)\r\n        so.inter_company_order_reference = doc.name      # standard field on SO\r\n        so.po_no = doc.name                              # optional: shows PO ref on SO print\r\n\r\n        # keep a list of source PO item names to link back later\r\n        source_po_items = []\r\n\r\n        for po_item in doc.items:\r\n            source_po_items.append(po_item.name)\r\n\r\n            item_row = {\r\n                \"item_code\": po_item.item_code,\r\n                \"item_name\": po_item.item_name,\r\n                \"description\": po_item.description,\r\n                \"qty\": po_item.qty,\r\n                \"uom\": po_item.uom,\r\n                \"rate\": po_item.rate,\r\n\r\n                # forward link (SO item → PO / PO Item)\r\n                \"purchase_order\": doc.name,\r\n                \"purchase_order_item\": po_item.name,\r\n            }\r\n            if default_warehouse:\r\n                item_row[\"warehouse\"] = default_warehouse\r\n    \r\n            so.append(\"items\", item_row)\r\n\r\n        so.insert(ignore_permissions=True)\r\n        # leave it as Draft for manual review\r\n        frappe.msgprint(f\"Draft Sales Order {so.name} created for internal customer {customer_name} in {target_company}.\")\r\n\r\n        # --- back-link on the source PO (header) ---\r\n        frappe.db.set_value(\"Purchase Order\", doc.name, \"inter_company_order_reference\", so.name, update_modified=False)\r\n    \r\n        # --- back-link each PO Item to the created SO Item ---\r\n        # (the order of SO items matches the append loop)\r\n        so.reload()\r\n        for idx, so_item in enumerate(so.items):\r\n            if idx < len(source_po_items):\r\n                po_item_name = source_po_items[idx]\r\n                # PO Item has these standard link fields:\r\n                frappe.db.set_value(\"Purchase Order Item\", po_item_name, \"sales_order\", so.name,          update_modified=False)\r\n                frappe.db.set_value(\"Purchase Order Item\", po_item_name, \"sales_order_item\", so_item.name, update_modified=False)\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save (Submitted Document)",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-09-09 03:05:34.431954",
  "module": "CTN Management",
  "name": "CTN Transfer Piece Server Script",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "CTN Transfer Piece",
  "script": "# CTN Transfer Piece — create ONE Material Transfer when state becomes Received,\r\n# and move each CTN Box to the destination warehouse.\r\n\r\ntry:\r\n    state_now  = (doc.workflow_state or doc.get(\"status\") or \"\").strip()\r\n\r\n    if state_now not in (\"Received\", \"Recieved\"):\r\n        raise StopIteration\r\n\r\n    from_wh = doc.get(\"from_warehouse\") or doc.get(\"from\")\r\n    to_wh   = doc.get(\"to_warehouse\")   or doc.get(\"to\")\r\n    if not from_wh or not to_wh:\r\n        frappe.log_error(\r\n            title=\"CTN Received: missing warehouses\",\r\n            message=f\"{doc.name}: from='{from_wh}' to='{to_wh}'\"\r\n        )\r\n        raise StopIteration\r\n\r\n    # Idempotency: skip if an SE already exists for this piece\r\n    existing = frappe.db.exists(\r\n        \"Stock Entry\",\r\n        {\"docstatus\": [\"!=\", 2], \"custom_ctn_transfer_piece\": doc.name}\r\n    )\r\n    if existing:\r\n        frappe.log_error(title=\"CTN Received: SE already exists\", message=f\"{doc.name} → {existing}\")\r\n        raise StopIteration\r\n\r\n    # Aggregate items across all CTN Boxes in this piece\r\n    totals = {}  # {item_code: total_qty}\r\n\r\n    for row in (doc.get(\"ctn\") or []):\r\n        ctn_ref = row.get(\"ctn\") or row.get(\"ctn_no\") or row.get(\"name\")\r\n        if not ctn_ref:\r\n            continue\r\n\r\n        # Move CTN Box to destination\r\n        try:\r\n            frappe.db.set_value(\"CTN BOX\", ctn_ref, \"warehouse\", to_wh)\r\n        except Exception:\r\n            frappe.log_error(f\"Failed to update CTN Box '{ctn_ref}' → {to_wh}\", \"CTN Box Update Error\")\r\n\r\n        # Sum items inside CTN Box\r\n        try:\r\n            box = frappe.get_doc(\"CTN BOX\", ctn_ref)\r\n        except Exception:\r\n            frappe.log_error(f\"Missing CTN Box '{ctn_ref}'\", \"CTN Fetch Error\")\r\n            continue\r\n\r\n        for it in box.get(\"items\") :\r\n            item_code = it.get(\"item\")\r\n            qty_raw   = it.get(\"qty\")\r\n            if not item_code or qty_raw is None:\r\n                continue\r\n            try:\r\n                qty = float(qty_raw)\r\n            except Exception:\r\n                qty = 0\r\n            if qty <= 0:\r\n                continue\r\n\r\n            # ❗ no augmented assignment in server scripts\r\n            totals[item_code] = (totals.get(item_code, 0) + qty)\r\n\r\n    if not totals:\r\n        frappe.log_error(\"CTN Received: no items found across CTNs\", f\"{doc.name}\")\r\n        raise StopIteration\r\n\r\n    # Create ONE Material Transfer covering all aggregated items\r\n    se = frappe.new_doc(\"Stock Entry\")\r\n    se.stock_entry_type = \"Material Transfer\"\r\n    se.company = doc.company\r\n    se.from_warehouse = from_wh\r\n    se.to_warehouse   = to_wh\r\n    se.custom_ctn_transfer_piece = doc.name  # custom Link field on Stock Entry\r\n\r\n    for item_code, qty in totals.items():\r\n        row = se.append(\"items\", {})\r\n        row.item_code   = item_code\r\n        row.qty         = qty\r\n\r\n    se.insert(ignore_permissions=True)\r\n    se.submit()\r\n\r\n    frappe.get_doc({\r\n        \"doctype\": \"Comment\",\r\n        \"comment_type\": \"Info\",\r\n        \"reference_doctype\": doc.doctype,\r\n        \"reference_name\": doc.name,\r\n        \"content\": f\"✅ Material Transfer created: <b>{se.name}</b> | {from_wh} → {to_wh}\"\r\n    }).insert(ignore_permissions=True)\r\n\r\nexcept StopIteration:\r\n    pass\r\nexcept Exception:\r\n    frappe.log_error(frappe.get_traceback(), \"CTN Server Script Error (on_update_after_submit)\")\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-30 09:02:11.296968",
  "module": "POS AR",
  "name": "Command Achat",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Order",
  "script": "\r\ndef split_bts_token(token):\r\n    if not token:\r\n        return {\"base\": None, \"suffix\": None}\r\n    s = str(token).strip()\r\n    idx = s.rfind(\"--\")  # last '--'\r\n    if idx == -1:\r\n        return {\"base\": s, \"suffix\": None}\r\n    return {\"base\": s[:idx].strip(), \"suffix\": s[idx+2:].strip() or None}\r\n\r\n# ---- Safe, non-blocking linking ----\r\nraw = doc.get(\"custom_main_command\")\r\nif raw:  # only proceed if present; otherwise silently do nothing\r\n    tok = split_bts_token(raw)\r\n    bts_name = tok[\"base\"]\r\n    suffix   = tok[\"suffix\"]\r\n\r\n    if bts_name and frappe.db.exists(\"Buy The Sold\", bts_name):\r\n        fieldname = \"alter_command_achat\" if suffix == \"AlterCommand\" else \"command_achat\"\r\n        frappe.db.set_value(\"Buy The Sold\", bts_name, fieldname, doc.name, update_modified=False)\r\n# no exceptions, so submit won't be blocked\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Cancel",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-30 09:05:05.903372",
  "module": "POS AR",
  "name": "Command Achat - OnCancel",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Order",
  "script": "\r\ndef split_bts_token(token):\r\n    if not token:\r\n        return {\"base\": None, \"suffix\": None}\r\n    s = str(token).strip()\r\n    idx = s.rfind(\"--\")  # last '--'\r\n    if idx == -1:\r\n        return {\"base\": s, \"suffix\": None}\r\n    return {\"base\": s[:idx].strip(), \"suffix\": s[idx+2:].strip() or None}\r\n\r\nraw = doc.get(\"custom_main_command\")\r\nif raw:\r\n    tok = split_bts_token(raw)\r\n    bts_name = tok[\"base\"]\r\n    suffix   = tok[\"suffix\"]\r\n\r\n    if bts_name and frappe.db.exists(\"Buy The Sold\", bts_name):\r\n        fieldname = \"alter_command_achat\" if suffix == \"AlterCommand\" else \"command_achat\"\r\n\r\n        frappe.db.set_value(\"Buy The Sold\", bts_name, fieldname, \"---\", update_modified=False)\r\n\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-09-08 11:17:22.825843",
  "module": "POS AR",
  "name": "Purchase Invoice - OnSubmite",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Invoice",
  "script": "# Link a submitted Purchase Invoice back to \"Buy The Sold\"\r\n# Strategy:\r\n# 1) Try PI Item.purchase_order → get that PO.custom_main_command (BTS name)\r\n# 2) save\r\n# 3) Fill BTS items table with Found / Alter / Not Found based on submitted Purchase Invoice\r\n\r\n\r\n# ---------- helpers ----------\r\ndef split_bts_token(token):\r\n    if not token:\r\n        return {\"base\": None, \"suffix\": None}\r\n    s = str(token).strip()\r\n    idx = s.rfind(\"--\")  # last '--'\r\n    if idx == -1:\r\n        return {\"base\": s, \"suffix\": None}\r\n    return {\"base\": s[:idx].strip(), \"suffix\": s[idx+2:].strip() or None}\r\n\r\n\r\n\r\ndef pick_first(items, keys):\r\n    for row in (items or []):\r\n        for k in keys:\r\n            if row.get(k):\r\n                return row.get(k)\r\n    return None\r\n\r\ndef qty_by_item(items):\r\n    \"\"\"Aggregate PI quantities per item_code.\"\"\"\r\n    m = {}\r\n    for it in (items or []):\r\n        code = it.get(\"item_code\")\r\n        if not code:\r\n            continue\r\n        # Prefer qty (in stock UOM). If you track in base units, switch to stock_qty.\r\n        q = float(it.get(\"qty\") or 0)\r\n        m[code] = m.get(code, 0.0) + q\r\n    return m\r\n\r\n\r\n\r\n# -------- 1) Resolve the BTS name from the Purchase Order on PI items --------\r\npo = pick_first(doc.items, [\"purchase_order\"])\r\nif po:\r\n    raw = frappe.db.get_value(\"Purchase Order\", po, \"custom_main_command\")\r\n    tok = split_bts_token(raw)\r\n    bts_name = tok[\"base\"]\r\n    suffix   = tok[\"suffix\"]\r\n\r\n\r\n    if bts_name and frappe.db.exists(\"Buy The Sold\", bts_name):\r\n        # -------- 2) Link this PI back to BTS (your existing behavior) --------------\r\n        # Adjust the fieldname if you store PI link elsewhere\r\n        pi_field = \"alter_facture_achat\" if suffix == \"AlterCommand\" else \"facture_achat\"\r\n        frappe.db.set_value(\"Buy The Sold\", bts_name, pi_field, doc.name)\r\n    \r\n\r\n        # -------- 3) Build a map: item_code -> qty found on this PI -----------------\r\n        pi_qty = qty_by_item(doc.items)\r\n\r\n\r\n        # -------- 4) Update each BTS item row --------------------------------------\r\n        bts = frappe.get_doc(\"Buy The Sold\", bts_name)\r\n\r\n\r\n\r\n        if suffix == \"Command\":\r\n            for row in (bts.items or []):\r\n                item_code = row.get(\"item\")\r\n                # 'sold' is preferred; fall back to 'qty' if that's what you use\r\n                sold_qty = float(row.get(\"sold\")  or 0.0)\r\n                found_qty = float(pi_qty.get(item_code, 0.0))\r\n                alter_qty = max(sold_qty - found_qty, 0.0)\r\n                not_found_qty = max( (sold_qty - (found_qty + alter_qty)) , 0.0)\r\n\r\n                # Write back to the child row (make sure these fields exist on the child doctype)\r\n                frappe.db.set_value(row.doctype, row.name, \"found\",      found_qty)\r\n                frappe.db.set_value(row.doctype, row.name, \"alter\",      alter_qty)\r\n                frappe.db.set_value(row.doctype, row.name, \"not_found\",  not_found_qty)\r\n        else:\r\n            for row in (bts.items or []):\r\n                item_code = row.get(\"item\")\r\n                # 'sold' is preferred; fall back to 'qty' if that's what you use\r\n                sold_qty = float(row.get(\"sold\")  or 0.0)\r\n                found_qty = float(row.get(\"found\") or 0.0)\r\n                alter_qty = float(pi_qty.get(item_code, 0.0))\r\n                not_found_qty = max( (sold_qty - (found_qty + alter_qty)) , 0.0)\r\n\r\n                # Write back to the child row (make sure these fields exist on the child doctype)\r\n                frappe.db.set_value(row.doctype, row.name, \"found\",      found_qty)\r\n                frappe.db.set_value(row.doctype, row.name, \"alter\",      alter_qty)\r\n                frappe.db.set_value(row.doctype, row.name, \"not_found\",  not_found_qty)\r\n    \r\n\r\n\r\n\r\n    # Done. No need to commit; Frappe handles it for DocType Event scripts.\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Cancel",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-09-08 11:35:28.007537",
  "module": "POS AR",
  "name": "Purchase Invoice - OnCancel",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Invoice",
  "script": "# Link a submitted Purchase Invoice back to \"Buy The Sold\"\r\n# Strategy:\r\n# 1) Try PI Item.purchase_order → get that PO.custom_main_command (BTS name)\r\n# 2) save\r\n\r\n# ---------- helpers ----------\r\ndef split_bts_token(token):\r\n    if not token:\r\n        return {\"base\": None, \"suffix\": None}\r\n    s = str(token).strip()\r\n    idx = s.rfind(\"--\")  # last '--'\r\n    if idx == -1:\r\n        return {\"base\": s, \"suffix\": None}\r\n    return {\"base\": s[:idx].strip(), \"suffix\": s[idx+2:].strip() or None}\r\n\r\n\r\ndef pick_first(items, keys):\r\n    for row in (items or []):\r\n        for k in keys:\r\n            if row.get(k):\r\n                return row.get(k)\r\n    return None\r\n    \r\n    \r\ndef qty_by_item(items):\r\n    \"\"\"Aggregate PI quantities per item_code.\"\"\"\r\n    m = {}\r\n    for it in (items or []):\r\n        code = it.get(\"item_code\")\r\n        if not code:\r\n            continue\r\n        # Prefer qty (in stock UOM). If you track in base units, switch to stock_qty.\r\n        q = float(it.get(\"qty\") or 0)\r\n        m[code] = m.get(code, 0.0) + q\r\n    return m\r\n\r\n\r\n# ---------- 1) Resolve BTS + raw token from the PI's PO ----------\r\npo = pick_first(doc.items, [\"purchase_order\"])\r\nif po:\r\n    raw_token = frappe.db.get_value(\"Purchase Order\", po, \"custom_main_command\")\r\n    if raw_token:\r\n        tok      = split_bts_token(raw_token)\r\n        bts_name = tok[\"base\"]\r\n        suffix   = tok[\"suffix\"]\r\n\r\n        if bts_name and frappe.db.exists(\"Buy The Sold\", bts_name):\r\n            # ---------- 2) Clear the correct PI link ONLY if it points to this PI ----------\r\n            pi_field = \"alter_facture_achat\" if suffix == \"AlterCommand\" else \"facture_achat\"\r\n            frappe.db.set_value(\"Buy The Sold\", bts_name, pi_field, \"---\")\r\n\r\n            # ---------- 3) Build delta from THIS PI only, then subtract ----------\r\n            pi_delta = qty_by_item(doc.items)  # item_code -> qty from the canceled PI\r\n            bts = frappe.get_doc(\"Buy The Sold\", bts_name)\r\n\r\n            if suffix == \"AlterCommand\" :\r\n                for row in (bts.items or []):\r\n                    frappe.log_error(\" 7 ******>\")\r\n                    sold        = float(row.get(\"sold\"))\r\n                    found       = float(row.get(\"found\"))\r\n                    alter       = float(row.get(\"alter\"))\r\n\r\n                    # subtract this PI’s qty; clamp at 0\r\n                    new_alter   = max(sold - found , 0.0)\r\n                    not_found   = 0.0\r\n\r\n                    frappe.db.set_value(row.doctype, row.name, \"found\",     found)\r\n                    frappe.db.set_value(row.doctype, row.name, \"alter\",     new_alter)\r\n                    frappe.db.set_value(row.doctype, row.name, \"not_found\", not_found)\r\n\r\n            else :\r\n                for row in (bts.items or []):\r\n                    frappe.db.set_value(row.doctype, row.name, \"found\",     0.0)\r\n                    frappe.db.set_value(row.doctype, row.name, \"alter\",     0.0)\r\n                    frappe.db.set_value(row.doctype, row.name, \"not_found\", 0.0)\r\n\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-09-09 03:27:15.817792",
  "module": "CTN Management",
  "name": "Stock Entry - On Submit",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "piece_name = doc.get(\"custom_ctn_transfer_piece\")\n\nfrappe.db.set_value(\"CTN Transfer Piece\", piece_name , \"stock_entry\", doc.name)",
  "script_type": "DocType Event"
 }
]