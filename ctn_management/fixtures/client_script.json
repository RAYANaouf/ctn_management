[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "POS Closing Entry",
  "enabled": 1,
  "modified": "2025-06-03 19:47:04.214019",
  "module": "POS AR",
  "name": "calculate total money",
  "script": "frappe.ui.form.on('POS Closing Entry', {\n\n    refresh: function(frm) {\n        \n        // Predefined denominations\n        const denominations = [5, 10, 20, 50, 100 , 200 , 500, 1000, 2000];\n        \n\n        \n        // Ensure calculations after all refresh operations\n        frappe.after_ajax(async () => {\n            await waitForDataLoading(frm);\n            calculate_total_money(frm);\n        })\n\n\n        // Check if the table is empty\n        if (!frm.doc.custom_money || frm.doc.custom_money.length === 0) {\n            denominations.forEach(denomination => {\n                frm.add_child('custom_money', {\n                    money : `${denomination} DA`,\n                    qty   : 0, // Default count is 0\n                    total : 0  // Default count is 0\n                });\n            });\n\n            // Refresh the field to reflect changes\n            frm.refresh_field('custom_money');\n        }\n        \n        // Recalculate pos_invoice_count on refresh\n        update_pos_invoice_count(frm);\n        \n    },\n    \n    before_save: function(frm) {\n        // Recalculate pos_invoice_count before saving\n        update_pos_invoice_count(frm);\n    }\n});\n\nfunction waitForDataLoading(frm) {\n    return new Promise((resolve) => {\n        let checkInterval = setInterval(() => {\n            console.log(\"we are working..... \")\n            // Check if the necessary data is loaded\n            if (frm.doc.payment_reconciliation && frm.doc.payment_reconciliation.length > 0 && frm.doc.pos_transactions && frm.doc.pos_transactions.length > 0) {\n                console.log(\"we are working..... \" , frm.doc.payment_reconciliation.length , \"data\" , frm.doc.payment_reconciliation)\n                clearInterval(checkInterval);\n                resolve();\n            }\n        }, 200); // Check every 200ms\n    });\n}\n\n\nfrappe.ui.form.on('money',{\n    qty: function(frm, cdt, cdn) {\n        let row = frappe.get_doc(cdt, cdn);\n        if (row.money) {\n            let money = parseInt(row.money.split(' ')[0]); // Extract number from money\n            row.total = (row.qty || 0) * money; // Calculate total\n            frm.refresh_field('custom_money'); // Refresh the child table\n            calculate_total_denominations(frm)\n        }\n        \n        calculate_total_money(frm)\n    }\n})\n\nfunction calculate_total_denominations(frm){\n        \n    let total = 0\n    \n    if (frm.doc.custom_money) {\n        frm.doc.custom_money.forEach(row => {\n            total += row.total;\n        });\n    }\n    frm.set_value('custom_closing_amount', total);\n    frm.refresh_field('custom_closing_amount') ;\n}\n\n\n\nfrappe.ui.form.on('POS Invoice Reference',{\n    pos_transactions_add : function(frm , cdt , cdn){\n        calculate_total_money(frm)\t\n        update_pos_invoice_count(frm)\n    },\n    pos_transactions_remove : function(frm , cdt , cdn){\n        calculate_total_money(frm)\t\n        update_pos_invoice_count(frm)\n    },\n    pos_transactions : function(frm){\n        calculate_total_money(frm);\n        update_pos_invoice_count(frm)\n    }\n})\n\n\nfrappe.ui.form.on('POS Closing Entry Detail',{\n    payment_reconciliation_add : function(frm , cdt , cdn){\n        calculate_total_money(frm)\t\n    },\n    payment_reconciliation_remove : function(frm , cdt , cdn){\n        calculate_total_money(frm)\t\n    },\n    closing_amount : function(frm){\n        calculate_total_money(frm)\t\n    }\n})\n\n\nfrappe.ui.form.on('check_in_out',{\n    custom_check_in_out_add : function(frm , cdt , cdn){\n        calculate_total_money(frm)\t\n    },\n    custom_check_in_out_remove : function(frm , cdt , cdn){\n        calculate_total_money(frm)\t\n    },\n    amount : function(frm){\n        calculate_total_money(frm)\t\n    },\n    check_type : function(frm){\n        calculate_total_money(frm)\t\n    }\n})\n\n\n\nfunction calculate_total_money(frm) {\n    //frappe.msgprint(\"we are here\")\n    console.log(\" in cal with : \" , frm.doc.payment_reconciliation )\n    let total_money = 0;\n\n    let total_payment = 0 ;\n    let total_check_in_out = 0 ;\n    let closing_amount     = 0 ;\n\n    closing_amount = frm.doc.custom_closing_amount\n    \n    // Calculate total from Payment Table\n    if (frm.doc.payment_reconciliation) {\n        frm.doc.payment_reconciliation.forEach(row => {\n            total_payment += row.expected_amount || 0;\n        });\n    }\n    \n    // Calculate total from Payment Table\n    if (frm.doc.custom_check_in_out) {\n        frm.doc.custom_check_in_out.forEach(row => {\n            if(row.check_type == \"In\"){\n                total_check_in_out += row.amount || 0;    \n            }else{\n                total_check_in_out -= row.amount || 0;\n            }\n            \n        });\n    }\n    \n    total_money    = total_payment  + total_check_in_out\n\n    console.log(\"total_payment : \" , total_payment ,\" || custom_total_money : \" , total_money , \" || custom_closing_amount : \" , closing_amount , \" || custom_difference :  \" , closing_amount - total_money)\n    \n    \n    // Update Total Money field\n    frm.set_value('custom_total_money', total_money);\n    frm.set_value('custom_difference', closing_amount - total_money);\n    \n    // Refresh the field to reflect changes\n    frm.refresh_field('custom_total_money');\n    frm.refresh_field('custom_difference');\n}\n\n\nfunction update_pos_invoice_count(frm) {\n    let new_count = (frm.doc.pos_transactions) ? frm.doc.pos_transactions.length : 0;\n    if (frm.doc.pos_invoice_count !== new_count) {\n        frm.set_value('custom_pos_invoice_count', new_count);\n        frm.refresh_field('custom_pos_invoice_count');\n    }\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "CTN-BOX",
  "enabled": 1,
  "modified": "2025-08-19 23:57:34.425582",
  "module": "POS AR",
  "name": "readOnlyAfterSaving",
  "script": "frappe.ui.form.on(\"CTN-BOX\", {\r\n  refresh(frm) {\r\n          \r\n    // If the document is already saved (not new):\r\n    if (!frm.is_new()) {\r\n      frm.set_df_property(\"ref\"       , \"read_only\", 1);\r\n      frm.set_df_property(\"ctn_num\"   , \"read_only\", 1);\r\n      frm.set_df_property(\"items\"     , \"read_only\", 1);\r\n      frm.set_df_property(\"company\"   , \"read_only\", 1);\r\n      frm.set_df_property(\"warehouse\" , \"read_only\", 1);\r\n    } else {\r\n      frm.set_df_property(\"ref\", \"read_only\", 0);\r\n    }\r\n\r\n    // Fetch transactions if saved\r\n    if (!frm.is_new()) {\r\n        frappe.call({\r\n            method: \"pos_ar.pos_ar.doctype.ctn_box.ctn_box.get_transactions\",\r\n            args: {\r\n                ctn_box_name: frm.doc.name\r\n            },\r\n            callback: function(r) {\r\n                if (r.message) {\r\n                    let data = r.message;\r\n            \r\n                    // Build a Bootstrap-styled table with border-radius, no top margin\r\n                    let html = `\r\n                        <div class=\"table-responsive\"\r\n                            style=\"border: 1px solid #dee2e6; \r\n                            border-radius: 6px; \r\n                            overflow: hidden; \r\n                            margin: 0; \r\n                            padding: 0;\">\r\n                        <table class=\"table table-hover table-striped mb-0\" style=\"margin: 0;\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Type</th>\r\n                                    <th>Reference</th>\r\n                                    <th>Item</th>\r\n                                    <th>Qty</th>\r\n                                </tr>\r\n                            </thead>\r\n                        <tbody>\r\n                    `;\r\n\r\n                    data.forEach(row => {\r\n                        console.log(\"row ==--==> \" , row)\r\n                        html += `\r\n                            <tr>\r\n                                <td>${row.ref_type || \"\"}</td>\r\n                                <td>${row.ref || \"\"}</td>\r\n                                <td>${row.item || \"\"}</td>\r\n                                <td>${row.qty}</td>\r\n                            </tr>\r\n                        `;\r\n                    });\r\n\r\n                    html += `\r\n                        </tbody>\r\n                        </table>\r\n                        </div>\r\n                    `;\r\n\r\n\r\n                    // Inject into the HTML field\r\n                    frm.fields_dict[\"transactions_html\"].$wrapper.html(html);\r\n            \r\n            \r\n                    // 2) Now compute the \"current state\" of each Item.\r\n                    //    doc.items holds the initial quantities,\r\n                    //    and that each transaction row is an \"outbound\" (subtract) quantity.\r\n            \r\n                    let itemMap = {};\r\n            \r\n                    // A) Start with the \"init items\" in the CTN\r\n            \r\n                    if (frm.doc.items) {\r\n                        frm.doc.items.forEach(initRow => {\r\n                            console.log(\"initRow ==> \" , initRow)\r\n                            if (initRow.item) {\r\n                                itemMap[initRow.item] = (itemMap[initRow.item] || 0) + (initRow.qty || 0);\r\n                            }\r\n                        });\r\n                    }\r\n                    \r\n                    \r\n                            console.log(\"itemMap ==> \" , itemMap)\r\n            \r\n                    // B) Add the transaction quantities\r\n                    data.forEach(txn => {\r\n                        if (txn.item) {\r\n                            itemMap[txn.item] = (itemMap[txn.item] || 0) - (txn.qty || 0);\r\n                        }\r\n                    });\r\n            \r\n            \r\n                    // 3) Build a second table for the \"CTN Status\" HTML field\r\n                    let statusHtml = `\r\n                        <div class=\"table-responsive\"\r\n                            style=\"border: 1px solid #dee2e6;\r\n                            border-radius: 6px;\r\n                            overflow: hidden;\r\n                            margin-top: 1rem;\">\r\n                            <table class=\"table table-hover table-striped mb-0\" style=\"margin: 0;\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Item</th>\r\n                                        <th>Remaining Qty</th>\r\n                                    </tr>\r\n                                </thead>\r\n                            <tbody>\r\n                    `;\r\n            \r\n            \r\n                    Object.keys(itemMap).forEach(itemCode => {\r\n                        statusHtml += `\r\n                            <tr>\r\n                                <td>${itemCode}</td>\r\n                                <td>${itemMap[itemCode]}</td>\r\n                            </tr>\r\n                        `;\r\n                    });\r\n            \r\n            \r\n                    statusHtml += `\r\n                        </tbody>\r\n                        </table>\r\n                        </div>\r\n                    `;\r\n\r\n                    // 4) Inject the status table into your \"ctn_status_html\" field\r\n                    frm.fields_dict[\"ctn_status_html\"].$wrapper.html(statusHtml);\r\n            \r\n                }else{\r\n              \r\n                    // If no transactions found, clear the fields (or show a message)\r\n                    frm.fields_dict[\"transactions_html\"].$wrapper.html(\"\");\r\n                    frm.fields_dict[\"ctn_status_html\"].$wrapper.html(\"No Transactions Found.\");\r\n                }\r\n            }\r\n        });\r\n    } else {\r\n      // If it's a new doc, clear both HTML fields\r\n      frm.fields_dict[\"transactions_html\"].$wrapper.html(\"\");\r\n      frm.fields_dict[\"ctn_status_html\"].$wrapper.html(\"\");\r\n    }\r\n  }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2025-06-16 08:21:44.571672",
  "module": "POS AR",
  "name": "filter item by ctn",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})\n\nfrappe.ui.form.on(\"CTN Transaction Sales Invoice\", {\n  ctn: function(frm, cdt, cdn) {\n    let row = frappe.get_doc(cdt, cdn);\n\n    if (!row.ctn) {\n      frm.fields_dict[\"custom_ctn_transaction\"].grid.get_field(\"item\").get_query = () => ({});\n      return;\n    }\n\n    frappe.call({\n      method: \"pos_ar.pos_ar.doctype.ctn_box.ctn_box.get_ctn_items\",\n      args: {\n        // pass in row.ctn if that’s actually the box name\n        ctn_box_name: row.ctn\n      },\n      callback: function(r) {\n          \n        if (r.message) {\n          \n          let allowed_items = r.message;\n          \n          console.log(allowed_items)\n          \n          frm.fields_dict[\"custom_ctn_transaction\"].grid.get_field(\"item\").get_query = \n            function(doc, cdt2, cdn2) {\n              return { filters: { name: [\"in\", allowed_items] } };\n            };\n\n          if (row.item && !allowed_items.includes(row.item)) {\n            frappe.model.set_value(cdt, cdn, \"item\", null);\n          }\n        }\n      }\n    });\n  }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2025-03-26 18:13:46.035212",
  "module": "POS AR",
  "name": "Assign_CTN",
  "script": "function update_ctn_transaction(frm){\r\n    frm.clear_table(\"custom_ctn_transaction\");\r\n    let see = frm.doc.items.map((row) => {\r\n        return {\r\n            item: row.item_code, // rename item_code -> item\r\n            qty: row.qty\r\n        };\r\n    })\r\n    frappe.call({\r\n        method: \"pos_ar.pos_ar.doctype.ctn_box.ctn_box.get_ctn_for_invoice\",\r\n        args: {\r\n            // Transform each row to { item: <code>, qty: <number> }\r\n            items: frm.doc.items.map((row) => {\r\n                return {\r\n                    item: row.item_name, // rename item_code -> item\r\n                    qty: row.qty,\r\n                    warehouse: row.warehouse  \r\n                };\r\n            }),\r\n            // pass the invoice name\r\n            warehouse: frm.doc.set_warehouse,\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n            \r\n                r.message.forEach(d => {\r\n                    let row = frm.add_child(\"custom_ctn_transaction\");\r\n                    row.ctn = d.ctn;\r\n                    row.item = d.item;\r\n                    row.qty = d.qty;\r\n                });\r\n                frm.refresh_field(\"custom_ctn_transaction\");\r\n            }\r\n        }\r\n    });\r\n\r\n    frm.refresh_field(\"custom_ctn_transaction\");\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfrappe.ui.form.on(\"Sales Invoice\", {\r\n    set_warehouse : function(frm) {\r\n        update_ctn_transaction(frm);\r\n    },\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\nfrappe.ui.form.on(\"Sales Invoice Item\", {\r\n    item_code: function(frm, cdt, cdn) {\r\n        update_ctn_transaction(frm);\r\n    },\r\n    qty: function(frm, cdt, cdn) {\r\n        update_ctn_transaction(frm);\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-06-16 08:22:01.984582",
  "module": "POS AR",
  "name": "get_messing_product",
  "script": "frappe.ui.form.on('Purchase Order', {\r\n    custom_start(frm) {\r\n        fetch_sold_items_if_ready(frm);\r\n    },\r\n\r\n    custom_end(frm) {\r\n        fetch_sold_items_if_ready(frm);\r\n    },\r\n\r\n    company(frm) {\r\n        fetch_sold_items_if_ready(frm);\r\n    }\r\n});\r\n\r\n\r\n\r\nfunction fetch_sold_items_if_ready(frm) {\r\n    const start = frm.doc.custom_start;\r\n    const end = frm.doc.custom_end;\r\n    const company = frm.doc.company;\r\n\r\n    if (start && end && company) {\r\n        frappe.call({\r\n            method: \"pos_ar.api.get_item_sold\",\r\n            args: { start, end, company },\r\n            callback: function(r) {\r\n                if (r.message) {\r\n                    // Clear current items table\r\n                    frm.clear_table(\"items\");\r\n                    // Add returned sold items to items table\r\n                    r.message.forEach(row => {\r\n                        const item = frm.add_child(\"items\");\r\n                        item.item_code = row.item_name;\r\n                        item.item_name = row.item_name;\r\n                        item.qty = row.total_qty;\r\n                        item.uom = row.stock_uom;\r\n                    });\r\n\r\n                    frm.refresh_field(\"items\");\r\n                }\r\n            }\r\n        });\r\n    } else {\r\n        console.log(\"Waiting for all fields to be filled (start, end, company)\");\r\n    }\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "CTN Transfer",
  "enabled": 1,
  "modified": "2025-05-28 08:13:02.952863",
  "module": "POS AR",
  "name": "CTN-Transfer-BTN-CLK",
  "script": "\nfrappe.ui.form.on('CTN Transfer', {\n\trefresh(frm) {\n\t\t// You can show/hide buttons based on state here if needed\n\t},\n\n\tsearch_btn(frm) {\n\t    const ref = frm.doc.set_requirement ? frm.doc.ref : null\n\t    const max = frm.doc.set_requirement ? frm.doc.max : null\n\t    console.log(\"just see here ==> \" , ref , max)\n\t    frappe.call({\n            method: \"pos_ar.api.CA_FRD_generator\",\n            args: {\n                ref            : ref,\n                max_count      : max,\n                from_warehouse : frm.doc.from,\n                to_warehouse   : frm.doc.to\n            },\n            callback: function(r) {\n                console.log(\"result:\", r);\n                if (r.message) {\n                    // Clear current CTNs table\n                    frm.clear_table(\"ctns\");\n\n                    // Add new CTNs to child table\n                    r.message.needed_ctns.forEach(row => {\n                        const item = frm.add_child(\"ctns\");\n                        item.ctn = row;\n                    });\n                    frm.refresh_field(\"ctns\");\n\n                    // Save CTN details in memory (not saved to DB)\n                    frm.doc._ctn_details_map = r.message.ctn_details;\n\n                    // Render CTN details as HTML\n                    const html = generateCTNHtml(r.message.needed_ctns, r.message.ctn_details);\n                    frm.fields_dict[\"ctn_details\"].$wrapper.html(html);\n                }\n            }\n        });\n\t},\n\n\tgenerate_transfer_btn(frm) {\n\t    const ctns = (frm.doc.ctns || []).map(row => row.ctn);\n\t    const ctn_details = frm.doc._ctn_details_map || {};\n\n\t    if (ctns.length === 0) {\n\t        frappe.msgprint(__('No CTNs selected'));\n\t        return;\n\t    }\n\n\t    const { custom_ctn_boxs, items } = buildCTNTransferData(ctns, ctn_details);\n\n\t    if (items.length === 0) {\n\t        frappe.msgprint(__('No items found in selected CTNs'));\n\t        return;\n\t    }\n\n\t    frappe.call({\n\t        method: \"frappe.client.insert\",\n\t        args: {\n\t            doc: {\n\t                doctype: \"Stock Entry\",\n\t                stock_entry_type: \"Material Transfer\",\n\t                from_warehouse: frm.doc.from,\n\t                to_warehouse: frm.doc.to,\n\t                custom_transfer_by_ctns: 1,\n\t                custom_ctn_boxs,\n\t                items\n\t            }\n\t        },\n\t        callback: function(res) {\n\t            const docname = res.message.name;\n\t            frappe.set_route(\"Form\", \"Stock Entry\", docname);\n\t        }\n\t    });\n\t}\n});\n\n// 📦 Helper to build CTN -> HTML table for display\nfunction generateCTNHtml(ctns, ctn_details) {\n    console.log(\"ctns --> \" , ctns , \"ctn_details --> \" , ctn_details)\n    let html = \"\";\n\n    ctns.forEach(ctn => {\n        html += `<h4 style=\"margin-top:16px; color:#4a4a4a;\">📦 CTN: ${ctn}</h4>`;\n        html += `<table class=\"table table-bordered\" style=\"width:100%; margin-bottom: 20px;\">\n                    <thead>\n                        <tr>\n                            <th style=\"width: 60%;\">Item Code</th>\n                            <th style=\"width: 40%;\">Quantity</th>\n                        </tr>\n                    </thead>\n                    <tbody>`;\n\n        (ctn_details[ctn] || []).forEach(item => {\n            html += `\n                <tr>\n                    <td>${item.item}</td>\n                    <td>${item.qty}</td>\n                </tr>`;\n        });\n\n        html += `</tbody></table>`;\n    });\n\n    return html || \"<p>No CTNs found.</p>\";\n}\n\n// 🧠 Helper to convert CTN details to CTN box and item list\nfunction buildCTNTransferData(ctns, ctn_details) {\n    const custom_ctn_boxs = [];\n    const itemMap = {};\n    \n    console.log(ctns , ctn_details )\n\n    ctns.forEach(ctn => {\n        custom_ctn_boxs.push({ ctn: ctn });\n\n        (ctn_details[ctn] || []).forEach(({ item, qty }) => {\n            if (!itemMap[item]) {\n                itemMap[item] = 0;\n            }\n            itemMap[item] += qty;\n        });\n    });\n\n    const items = Object.keys(itemMap).map(item_code => ({\n        item_code,\n        qty: itemMap[item_code]\n    }));\n\n    return { custom_ctn_boxs, items };\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-05-06 12:07:41.165561",
  "module": "POS AR",
  "name": "auto fill",
  "script": "frappe.ui.form.on('Stock Entry', {\r\n\r\n\tcustom_transfer_by_ctns(frm) {\r\n\t\tupdate_items_from_ctns(frm);\r\n\t}\r\n});\r\n\r\n\r\nfrappe.ui.form.on('Stock Transfer CTN', {\r\n\tcustom_ctn_boxs_remove(frm) {\r\n\t\tupdate_items_from_ctns(frm);\r\n\t},\r\n\r\n\tctn(frm) {\r\n\t\tupdate_items_from_ctns(frm);\r\n\t}\r\n});\r\n\r\nfunction update_items_from_ctns(frm) {\r\n    \r\n    const is_receipt = frm.doc.stock_entry_type === \"Material Receipt\";\r\n    \r\n\tif (!frm.doc.custom_transfer_by_ctns || !frm.doc.custom_ctn_boxs.length) return;\r\n\r\n\tfrm.clear_table(\"items\");\r\n\tfrm.refresh_field(\"items\");\r\n\r\n    const ctn_names = frm.doc.custom_ctn_boxs.map(row => row.ctn)\r\n\r\n    console.log(\"the ctns ==> \" , ctn_names)\r\n    \r\n    frappe.call({\r\n        method : \"pos_ar.api.get_items_from_ctns\",\r\n        args : { ctn_list : ctn_names},\r\n        freeze : true,\r\n        freeze_message : \"Fetching items from CTNs ...\",\r\n        callback : function(r){\r\n            if(!r.message) return;\r\n            frm.clear_table(\"items\");\r\n            r.message.forEach(item => {\r\n                frm.add_child(\"items\" , {\r\n                    item_code         : item.item_code,\r\n                    qty               : item.qty ,\r\n                    uom               : item.uom || \"\",\r\n                    stock_uom         : item.uom || \"\",\r\n                    transfer_qty      : item.qty * item.conversion_factor,\r\n                    conversion_factor : item.conversion_factor || 1 ,\r\n                    s_warehouse       : is_receipt ? \"\" :item.s_warehouse,\r\n                    t_warehouse       : frm.doc.to_warehouse //default to warhouse on issue just dont set it.\r\n                })\r\n            })\r\n            \r\n            frm.refresh_field(\"items\");\r\n            frappe.show_alert(\"Items updated from CTNs\")\r\n        }\r\n    })\r\n\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Company",
  "enabled": 1,
  "modified": "2025-05-24 14:58:49.183353",
  "module": "POS AR",
  "name": "filter-company-default_warehouse",
  "script": "frappe.ui.form.on('Company', {\r\n    setup(frm) {\r\n        frm.set_query('custom_default_warehouse', () => {\r\n            return {\r\n                filters: {\r\n                    company: frm.doc.name\r\n                }\r\n            };\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Buy The Need",
  "enabled": 1,
  "modified": "2025-08-29 20:04:12.495934",
  "module": "POS AR",
  "name": "Buy The Need",
  "script": "frappe.ui.form.on('Buy The Need', {\n\trefresh(frm) {\n\t\t// Clear main fields\n\t    frm.set_value(\"supplier\", \"\");\n\t    frm.set_value(\"alter_supplier\", \"\");\n\t    frm.set_value(\"company\", \"\");\n\t    frm.set_value(\"from_company\", \"\");\n\t    frm.set_value(\"alter_from_company\", \"\");\n\t    frm.set_value(\"to_warehouse\", \"\");\n\t    frm.set_value(\"warehouse\", \"\");\n\t    frm.set_value(\"alter_warehouse\", \"\");\n\t    frm.set_value(\"start\", \"\");\n\t    frm.set_value(\"end\", \"\");\n\t    frm.set_value(\"max_of_qty\", \"\");\n\t    frm.set_value(\"search_by_time\", 0);\n\n\t    // Clear child tables\n\t    frm.clear_table(\"items\");\n\t    frm.clear_table(\"alter_items\");\n\n\t    // Refresh the fields and tables to reflect changes\n\t    frm.refresh_fields();\n\t},\n\t\n\tcompany(frm) {\n\t    frm.set_value(\"to_warehouse\" , \"\")\n        frm.set_query(\"to_warehouse\", function() {\n            return {\n                filters: {\n                    company: frm.doc.company\n                }\n            };\n        });\n    },\n\t\n\tasync search(frm) {\n\t    console.log(\"we are searching...\")\n\t    const search_by_time = frm.doc.search_by_time\n\t    if(!search_by_time){\n\t        \n\t    console.log(\"block 1 ---\")\n\t        \n\t        if (frm.doc.supplier) {\n\t\t\t    const warehouse = await get_supplier_default_warehouse(frm.doc.supplier);\n\t\t\t    if (warehouse) {\n\t\t\t        frappe.call({\n                        method: \"pos_ar.api.CA_FRD_generator\",\n                        args: {\n                            ref            : null,\n                            max_count      : null,\n                            from_warehouse : warehouse,\n                            to_warehouse   : frm.doc.to_warehouse\n                        },\n                        callback: function(r) {\n                            console.log(\"result:\", r);\n                            if (r.message) {\n                                frm.clear_table(\"items\");\n                            \n                                // Add new  to child table\n                                r.message.needed_items.forEach(row => {\n                                    console.log(\"see the item ===> \" , row)\n                                    const item = frm.add_child(\"items\");\n                                    item.item = row.item_code;\n                                    item.qty = row.qty;\n                                });\n                                frm.refresh_field(\"items\");\n                            }\n                        }\n                    });\n\t            } else {\n\t\t\t\t    frappe.msgprint(\"No default warehouse found for supplier.\");\n\t\t\t    }\n\t\t    }\n\t    }else{\n\t        \n\t        console.log(\"block 2 ---\")\n\t        const start          = frm.doc.start;\n            const end            = frm.doc.end;\n            const company        = frm.doc.company;\n            const to_warehouse   = frm.doc.to_warehouse;\n            const max_qty        = frm.doc.max_of_qty;\n            \n            \n            const from_warehouse = await get_supplier_default_warehouse(frm.doc.supplier);\n            console.log(\"from warehouse : \" , from_warehouse)\n            const alter_from_warehouse = await get_supplier_default_warehouse(frm.doc.alter_supplier);\n            console.log(\"alter_from_warehouse : \" , alter_from_warehouse)\n            \n            if (start && end && company) {\n                console.log(\"block 3 ---\")\n                frappe.call({\n                    method: \"pos_ar.api.buy_items_you_sell\",\n                    args: { start, end, company , from_warehouse , alter_from_warehouse , to_warehouse , max_qty},\n                    callback: function(r) {\n                        console.log(\"result ::\" , r)\n                        if (r.message) {\n                            // Clear current items table\n                            frm.clear_table(\"items\");\n                            // Add returned sold items to items table\n                            r.message.forEach( row => {\n                                console.log(\"row ==>\" , row)\n                                const item  = frm.add_child(\"items\");\n                                item.item   = row.item_code;\n                                item.sold   = row.total_qty;\n                            });\n                            frm.refresh_field(\"items\");\n                        }\n                    }\n                });\n            } else {\n                console.log(\"Waiting for all fields to be filled (start, end, company)\");\n            }\n\t    }\n\t},\n\t\n\t\n\tasync supplier(frm){\n\t    \n\t    const doc = await frappe.db.get_doc(\"Supplier\", frm.doc.supplier);\n        const company = doc.represents_company || null;\n        if(company == null){\n                return \n        }\n            \n        frm.set_value(\"from_company\" , company)\n            \n\t    if (frm.doc.supplier) {\n\t\t\tconst warehouse = await get_supplier_default_warehouse(frm.doc.supplier);\n\t\t\tfrm.set_value(\"warehouse\" , warehouse)\n\t\t\t\n\t       \n\t\t}\n\t},\n    generate(frm) {\n        if (!frm.doc.supplier || !frm.doc.items || frm.doc.items.length === 0) {\n            frappe.msgprint(\"Supplier and items are required to generate a Purchase Order.\");\n            return;\n        }\n\n        const warehouse = frm.doc.to_warehouse; \n    \n        if (!warehouse) {\n            frappe.msgprint(\"Please select the destination warehouse before generating the Purchase Order.\");\n            return;\n        }\n\n        var list_de_prix = \"\"\n        if(frm.doc.company == \"OPTILENS ALGER\"){\n            list_de_prix = \"DJILALI\"   \n        } else{\n            list_de_prix = \"TP - Alger\"  \n        } \n        \n        const purchase_order = {\n            doctype           : \"Purchase Order\",\n            supplier          : frm.doc.supplier,\n            company           : frm.doc.company,\n            schedule_date     : frappe.datetime.now_date(),\n            set_warehouse     : warehouse ,\n            buying_price_list : list_de_prix,\n            items : frm.doc.items.map(item => ({\n                item_code: item.item,\n                qty: item.qty,\n                schedule_date: frappe.datetime.now_date()\n            }))\n        };\n\n        frappe.call({\n            method: \"frappe.client.insert\",\n            args: { doc: purchase_order },\n            callback: function (res) {\n                if (res.message) {\n                    frappe.msgprint(\"Purchase Order created: \" + res.message.name);\n                    frappe.set_route(\"Form\", \"Purchase Order\", res.message.name);\n                }\n            }\n        });\n    },\n    \n\n    async alter_supplier(frm){\n        const doc = await frappe.db.get_doc(\"Supplier\", frm.doc.supplier);\n        const company = doc.represents_company || null;\n        if(company == null){\n                return \n        }\n            \n        frm.set_value(\"alter_from_company\" , company)\n            \n\t    if (frm.doc.supplier) {\n\t\t\tconst warehouse = await get_supplier_default_warehouse(frm.doc.supplier);\n\t\t\tfrm.set_value(\"alter_warehouse\" , warehouse)\n\t\t\t\n\t       \n\t\t}\n    }\n})\n\n\nasync function get_supplier_default_warehouse(supplier) {\n\tconst doc = await frappe.db.get_doc(\"Supplier\", supplier);\n\tconst company = doc.represents_company || null;\n\tif(company == null) return null\n\tconst result = await frappe.call({\n\t    method : \"pos_ar.api.get_company_default_warehouse\",\n\t    args   : {\n\t        company          : company,\n\t        ignorePermission : true\n\t    }\n\t})\n\treturn result.message.default_warehouse\n\n\t\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "CTN BOXS",
  "enabled": 1,
  "modified": "2025-08-19 23:59:51.165145",
  "module": "CTN Management",
  "name": "CTN BOX Client Script",
  "script": "frappe.ui.form.on(\"CTN BOX\", {\r\n  refresh(frm) {\r\n          \r\n    // If the document is already saved (not new):\r\n    if (!frm.is_new()) {\r\n      frm.set_df_property(\"ref\"       , \"read_only\", 1);\r\n      frm.set_df_property(\"ctn_num\"   , \"read_only\", 1);\r\n      frm.set_df_property(\"items\"     , \"read_only\", 1);\r\n      frm.set_df_property(\"company\"   , \"read_only\", 1);\r\n      frm.set_df_property(\"warehouse\" , \"read_only\", 1);\r\n    } else {\r\n      frm.set_df_property(\"ref\", \"read_only\", 0);\r\n    }\r\n\r\n    // Fetch transactions if saved\r\n    if (!frm.is_new()) {\r\n        frappe.call({\r\n            method: \"ctn_management.ctn_management.doctype.ctn_box.ctn_box.get_transactions\",\r\n            args: {\r\n                ctn_box_name: frm.doc.name\r\n            },\r\n            callback: function(r) {\r\n                if (r.message) {\r\n                    let data = r.message;\r\n            \r\n                    // Build a Bootstrap-styled table with border-radius, no top margin\r\n                    let html = `\r\n                        <div class=\"table-responsive\"\r\n                            style=\"border: 1px solid #dee2e6; \r\n                            border-radius: 6px; \r\n                            overflow: hidden; \r\n                            margin: 0; \r\n                            padding: 0;\">\r\n                        <table class=\"table table-hover table-striped mb-0\" style=\"margin: 0;\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Type</th>\r\n                                    <th>Reference</th>\r\n                                    <th>Item</th>\r\n                                    <th>Qty</th>\r\n                                </tr>\r\n                            </thead>\r\n                        <tbody>\r\n                    `;\r\n\r\n                    data.forEach(row => {\r\n                        console.log(\"row ==--==> \" , row)\r\n                        html += `\r\n                            <tr>\r\n                                <td>${row.type || \"\"}</td>\r\n                                <td>${row.ref || \"\"}</td>\r\n                                <td>${row.item || \"\"}</td>\r\n                                <td>${row.qty}</td>\r\n                            </tr>\r\n                        `;\r\n                    });\r\n\r\n                    html += `\r\n                        </tbody>\r\n                        </table>\r\n                        </div>\r\n                    `;\r\n\r\n\r\n                    // Inject into the HTML field\r\n                    frm.fields_dict[\"transactions_html\"].$wrapper.html(html);\r\n            \r\n            \r\n                    // 2) Now compute the \"current state\" of each Item.\r\n                    //    doc.items holds the initial quantities,\r\n                    //    and that each transaction row is an \"outbound\" (subtract) quantity.\r\n            \r\n                    let itemMap = {};\r\n            \r\n                    // A) Start with the \"init items\" in the CTN\r\n            \r\n                    if (frm.doc.items) {\r\n                        frm.doc.items.forEach(initRow => {\r\n                            console.log(\"initRow ==> \" , initRow)\r\n                            if (initRow.item) {\r\n                                itemMap[initRow.item] = (itemMap[initRow.item] || 0) + (initRow.qty || 0);\r\n                            }\r\n                        });\r\n                    }\r\n                    \r\n                    \r\n                            console.log(\"itemMap ==> \" , itemMap)\r\n            \r\n                    // B) Add the transaction quantities\r\n                    data.forEach(txn => {\r\n                        if (txn.item) {\r\n                            if(txn.type == \"In\"){\r\n                                itemMap[txn.item] = (itemMap[txn.item] || 0) + (txn.qty || 0);\r\n                            }else {\r\n                                itemMap[txn.item] = (itemMap[txn.item] || 0) - (txn.qty || 0);    \r\n                            }\r\n                            \r\n                        }\r\n                    });\r\n            \r\n            \r\n                    // 3) Build a second table for the \"CTN Status\" HTML field\r\n                    let statusHtml = `\r\n                        <div class=\"table-responsive\"\r\n                            style=\"border: 1px solid #dee2e6;\r\n                            border-radius: 6px;\r\n                            overflow: hidden;\r\n                            margin-top: 1rem;\">\r\n                            <table class=\"table table-hover table-striped mb-0\" style=\"margin: 0;\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Item</th>\r\n                                        <th>Remaining Qty</th>\r\n                                    </tr>\r\n                                </thead>\r\n                            <tbody>\r\n                    `;\r\n            \r\n            \r\n                    Object.keys(itemMap).forEach(itemCode => {\r\n                        statusHtml += `\r\n                            <tr>\r\n                                <td>${itemCode}</td>\r\n                                <td>${itemMap[itemCode]}</td>\r\n                            </tr>\r\n                        `;\r\n                    });\r\n            \r\n            \r\n                    statusHtml += `\r\n                        </tbody>\r\n                        </table>\r\n                        </div>\r\n                    `;\r\n\r\n                    // 4) Inject the status table into your \"ctn_status_html\" field\r\n                    frm.fields_dict[\"ctn_status_html\"].$wrapper.html(statusHtml);\r\n            \r\n                }else{\r\n              \r\n                    // If no transactions found, clear the fields (or show a message)\r\n                    frm.fields_dict[\"transactions_html\"].$wrapper.html(\"\");\r\n                    frm.fields_dict[\"ctn_status_html\"].$wrapper.html(\"No Transactions Found.\");\r\n                }\r\n            }\r\n        });\r\n    } else {\r\n      // If it's a new doc, clear both HTML fields\r\n      frm.fields_dict[\"transactions_html\"].$wrapper.html(\"\");\r\n      frm.fields_dict[\"ctn_status_html\"].$wrapper.html(\"\");\r\n    }\r\n  }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Buy The Sold",
  "enabled": 1,
  "modified": "2025-09-08 10:16:52.275672",
  "module": "POS AR",
  "name": "Buy The Sold",
  "script": "frappe.ui.form.on('Buy The Sold', {\r\n\r\n    onload(frm){\r\n        if(!frm.is_new()){\r\n            // show buttons on existing docs\r\n            frm.toggle_display(\"generate\", true);\r\n            frm.toggle_display(\"command_achat\", true);\r\n            frm.toggle_display(\"facture_achat\", true);\r\n            frm.toggle_display(\"generate_alter\", true);\r\n            frm.toggle_display(\"alter_command_achat\", true);\r\n            frm.toggle_display(\"alter_facture_achat\", true);\r\n        }\r\n    },\r\n\r\n    refresh(frm) {\r\n        // Show the Search button only in DRAFT (docstatus = 0)\r\n        const can_search = frm.doc.docstatus === 0;\r\n        frm.toggle_display(\"search\", can_search);\r\n\r\n        if (frm.is_new()) {\r\n            // hide buttons\r\n            frm.toggle_display(\"generate\", false);\r\n            frm.toggle_display(\"command_achat\", false);\r\n            frm.toggle_display(\"facture_achat\", false);\r\n            frm.toggle_display(\"generate_alter\", false);\r\n            frm.toggle_display(\"alter_command_achat\", false);\r\n            frm.toggle_display(\"alter_facture_achat\", false);\r\n\r\n            // Clear main fields\r\n            frm.set_value(\"supplier\", \"\");\r\n            frm.set_value(\"alter_supplier\", \"\");\r\n            frm.set_value(\"company\", \"\");\r\n            frm.set_value(\"from_company\", \"\");\r\n            frm.set_value(\"alter_from_company\", \"\");\r\n            frm.set_value(\"to_warehouse\", \"\");\r\n            frm.set_value(\"warehouse\", \"\");\r\n            frm.set_value(\"alter_warehouse\", \"\");\r\n            frm.set_value(\"start\", \"\");\r\n            frm.set_value(\"end\", \"\");\r\n            frm.set_value(\"search_by_time\", 0);\r\n\r\n            // Clear child tables\r\n            frm.clear_table(\"items\");\r\n\r\n            // Refresh the fields and tables to reflect changes\r\n            frm.refresh_fields();\r\n        } else {\r\n            evaluate_fulfillment_and_toggle_buttons(frm);\r\n            attach_items_grid_hooks(frm);  // <-- keep colors alive across pagination/refresh\r\n            colorize_items_grid(frm);      // initial paint\r\n        }\r\n    },\r\n\r\n    company(frm) {\r\n        frm.set_value(\"to_warehouse\" , \"\");\r\n        frm.set_query(\"to_warehouse\", function() {\r\n            return { filters: { company: frm.doc.company } };\r\n        });\r\n    },\r\n\r\n    async supplier(frm){\r\n        const doc = await frappe.db.get_doc(\"Supplier\", frm.doc.supplier);\r\n        const company = doc.represents_company || null;\r\n        if (company == null) return;\r\n\r\n        frm.set_value(\"from_company\", company);\r\n        const warehouse = await get_supplier_default_warehouse(frm.doc.supplier);\r\n        console.log(\"the warehouse\", warehouse);\r\n        frm.set_value(\"warehouse\", warehouse);\r\n    },\r\n\r\n    async alter_supplier(frm){\r\n        const doc = await frappe.db.get_doc(\"Supplier\", frm.doc.alter_supplier);\r\n        const company = doc.represents_company || null;\r\n        if (company == null) return;\r\n\r\n        frm.set_value(\"alter_from_company\", company);\r\n\r\n        if (frm.doc.supplier) {\r\n            const warehouse = await get_supplier_default_warehouse(frm.doc.alter_supplier);\r\n            frm.set_value(\"alter_warehouse\" , warehouse);\r\n        }\r\n    },\r\n\r\n    async search(frm) {\r\n        console.log(\"we are searching...\");\r\n        const search_by_time = frm.doc.search_by_time;\r\n\r\n        if (!search_by_time) {\r\n            console.log(\"block 1 ---\");\r\n\r\n            if (frm.doc.supplier) {\r\n                const warehouse = await get_supplier_default_warehouse(frm.doc.supplier);\r\n                if (warehouse) {\r\n                    frappe.call({\r\n                        method: \"pos_ar.api.CA_FRD_generator\",\r\n                        args: {\r\n                            ref            : null,\r\n                            max_count      : null,\r\n                            from_warehouse : warehouse,\r\n                            to_warehouse   : frm.doc.to_warehouse\r\n                        },\r\n                        callback: function(r) {\r\n                            console.log(\"result:\", r);\r\n                            if (r.message) {\r\n                                frm.clear_table(\"items\");\r\n\r\n                                // Add new to child table\r\n                                r.message.needed_items.forEach(row => {\r\n                                    console.log(\"see the item ===> \", row);\r\n                                    const item = frm.add_child(\"items\");\r\n                                    item.item = row.item_code;\r\n                                    item.qty  = row.qty;\r\n                                });\r\n\r\n                                frm.refresh_field(\"items\");\r\n\r\n                                // styling hooks\r\n                                install_overstock_css();\r\n                                attach_items_grid_hooks(frm);\r\n                                colorize_items_grid(frm);\r\n                            }\r\n                        }\r\n                    });\r\n                } else {\r\n                    frappe.msgprint(\"No default warehouse found for supplier.\");\r\n                }\r\n            }\r\n        } else {\r\n            console.log(\"block 2 ---\");\r\n            const start          = frm.doc.start;\r\n            const end            = frm.doc.end;\r\n            const company        = frm.doc.company;\r\n            const to_warehouse   = frm.doc.to_warehouse;\r\n            const max_qty        = frm.doc.max_of_qty;\r\n\r\n            const from_warehouse        = await get_supplier_default_warehouse(frm.doc.supplier);\r\n            console.log(\"from warehouse : \", from_warehouse);\r\n            const alter_from_warehouse  = await get_supplier_default_warehouse(frm.doc.alter_supplier);\r\n            console.log(\"alter_from_warehouse : \", alter_from_warehouse);\r\n\r\n            if (start && end && company) {\r\n                console.log(\"block 3 ---\");\r\n                frappe.call({\r\n                    method: \"pos_ar.api.buy_items_you_sell\",\r\n                    args: { start, end, company , from_warehouse , alter_from_warehouse , to_warehouse , max_qty},\r\n                    callback: function(r) {\r\n                        console.log(\"result ::\", r);\r\n                        if (r.message) {\r\n                            // Clear current items table\r\n                            frm.clear_table(\"items\");\r\n\r\n                            // Add returned sold items to items table\r\n                            r.message.forEach(row => {\r\n                                console.log(\"row ==>\", row);\r\n                                let is_overload = 0;\r\n                                let overload_qty = 0 ;\r\n                                let needed_qty = 0 ;\r\n                                if(row.on_stock > row.best_sell_qty){\r\n                                    is_overload = 1 ;\r\n                                    overload_qty = row.on_stock - row.best_sell_qty \r\n                                }else{\r\n                                    needed_qty = row.best_sell_qty - row.on_stock\r\n                                }\r\n                                const item          = frm.add_child(\"items\");\r\n                                item.item           = row.item_code;\r\n                                item.sold           = row.total_qty;\r\n                                item.on_stock       = row.on_stock;\r\n                                item.best_sell      = row.best_sell_qty;\r\n                                item.best_sell_date = row.best_sell_date;\r\n                                item.is_overload    = is_overload;\r\n                                item.overload_qty   = overload_qty;\r\n                                item.needed_qty     = needed_qty;\r\n                            });\r\n\r\n                            frm.refresh_field(\"items\");\r\n\r\n                            // styling hooks\r\n                            install_overstock_css();\r\n                            attach_items_grid_hooks(frm);\r\n                            colorize_items_grid(frm);\r\n                        }\r\n                    }\r\n                });\r\n            } else {\r\n                console.log(\"Waiting for all fields to be filled (start, end, company)\");\r\n            }\r\n        }\r\n    },\r\n\r\n    export_btn(frm){\r\n        export_child_table(frm);\r\n    },\r\n\r\n    generate(frm) {\r\n  if (!frm.doc.supplier || !frm.doc.items || frm.doc.items.length === 0) {\r\n    frappe.msgprint(\"Supplier and items are required to generate a Purchase Order.\");\r\n    return;\r\n  }\r\n  const warehouse = frm.doc.to_warehouse;\r\n  if (!warehouse) {\r\n    frappe.msgprint(\"Please select the destination warehouse before generating the Purchase Order.\");\r\n    return;\r\n  }\r\n\r\n  let list_de_prix = (frm.doc.company === \"OPTILENS ALGER\") ? \"DJILALI\" : \"TP - Alger\";\r\n\r\n  // Checkbox drives qty source: if true use needed_qty\r\n  const useNeeded = !!frm.doc.command_qty_needed;\r\n\r\n  const purchase_order = {\r\n    doctype               : \"Purchase Order\",\r\n    supplier              : frm.doc.supplier,\r\n    company               : frm.doc.company,\r\n    schedule_date         : frappe.datetime.now_date(),\r\n    set_warehouse         : warehouse,\r\n    buying_price_list     : list_de_prix,\r\n    custom_generate_order : true,\r\n    custom_main_command   : frm.doc.name + \"--Command\",\r\n    items: frm.doc.items\r\n      // when using needed_qty, skip rows with 0/blank needed\r\n      .filter(it => !useNeeded || (Number(it.needed_qty) || 0) > 0)\r\n      .map(item => {\r\n        // Decide which quantity field to use:\r\n        // - If \"needed\" mode: needed_qty (from time-based search)\r\n        // - Else: if you came from the time-based search, use `sold`; if from CA_FRD branch, use `qty`\r\n        const qty = useNeeded\r\n          ? (Number(item.needed_qty) || 0)\r\n          : (frm.doc.search_by_time ? (Number(item.sold) || 0) : (Number(item.qty) || 0));\r\n\r\n        return {\r\n          item_code: item.item,\r\n          qty,\r\n          schedule_date: frappe.datetime.now_date()\r\n        };\r\n      })\r\n  };\r\n\r\n  frappe.call({\r\n    method: \"frappe.client.insert\",\r\n    args: { doc: purchase_order },\r\n    callback: function (res) {\r\n      if (res.message) frappe.set_route(\"Form\", \"Purchase Order\", res.message.name);\r\n    }\r\n  });\r\n},\r\n\r\n    generate_alter(frm){\r\n        if (!frm.doc.alter_supplier || !frm.doc.items || frm.doc.items.length === 0) {\r\n            frappe.msgprint(\"Supplier and items are required to generate a Purchase Order.\");\r\n            return;\r\n        }\r\n        const warehouse = frm.doc.to_warehouse;\r\n\r\n        if (!warehouse) {\r\n            frappe.msgprint(\"Please select the destination warehouse before generating the Purchase Order.\");\r\n            return;\r\n        }\r\n\r\n        var list_de_prix = \"\";\r\n        if (frm.doc.company == \"OPTILENS ALGER\"){\r\n            list_de_prix = \"DJILALI\";\r\n        } else{\r\n            list_de_prix = \"TP - Alger\";\r\n        }\r\n\r\n        const purchase_order = {\r\n            doctype             : \"Purchase Order\",\r\n            supplier            : frm.doc.alter_supplier,\r\n            company             : frm.doc.company,\r\n            schedule_date       : frappe.datetime.now_date(),\r\n            set_warehouse       : warehouse,\r\n            buying_price_list   : list_de_prix,\r\n            custom_main_command : frm.doc.name + \"--AlterCommand\",\r\n            items : frm.doc.items.map(item => ({\r\n                item_code: item.item,\r\n                qty: item.alter,\r\n                schedule_date: frappe.datetime.now_date()\r\n            }))\r\n        };\r\n\r\n        frappe.call({\r\n            method: \"frappe.client.insert\",\r\n            args: { doc: purchase_order },\r\n            callback: function (res) {\r\n                if (res.message) {\r\n                    frappe.set_route(\"Form\", \"Purchase Order\", res.message.name);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n});\r\n\r\n\r\n\r\n/* ---------------- helpers ---------------- */\r\n\r\nasync function get_supplier_default_warehouse(supplier) {\r\n    const doc = await frappe.db.get_doc(\"Supplier\", supplier);\r\n    const company = doc.represents_company || null;\r\n    if (company == null) return null;\r\n\r\n    const result = await frappe.call({\r\n        method : \"pos_ar.api.get_company_default_warehouse\",\r\n        args   : {\r\n            company          : company,\r\n            ignorePermission : true\r\n        }\r\n    });\r\n    return result.message.default_warehouse;\r\n}\r\n\r\n\r\n/**\r\n * A record is \"fulfilled\" iff:\r\n *  - command_achat is set\r\n *  - facture_achat is set\r\n *  - for every child row: alter == 0\r\n * Hides/shows the \"generate_alter\"/links accordingly.\r\n */\r\nfunction evaluate_fulfillment_and_toggle_buttons(frm) {\r\n    let hasPO = false;\r\n    if (frm.doc.command_achat != \"---\") hasPO = true;\r\n\r\n    let hasPI = false;\r\n    if (frm.doc.facture_achat != \"---\") hasPI = true;\r\n\r\n    const rows = frm.doc.items || [];\r\n    const itemsOk = rows.length > 0\r\n        ? rows.every(r => (r.alter ?? 0) == 0)\r\n        : false;\r\n\r\n    const canShowAlt = hasPO && hasPI && !itemsOk;\r\n    console.log(\"po:\", hasPO, \"PI:\", hasPI, \"itemsOK:\", itemsOk, \"show:\", canShowAlt);\r\n\r\n    frm.toggle_display(\"generate_alter\", canShowAlt);\r\n    frm.toggle_display(\"alter_command_achat\", canShowAlt);\r\n    frm.toggle_display(\"alter_facture_achat\", canShowAlt);\r\n\r\n    frm.dashboard.clear_headline();\r\n    if (hasPO && hasPI && itemsOk) {\r\n        frm.dashboard.set_headline(__(\"✅ Commande & Facture complètes — tous les articles sont couverts.\"));\r\n    } else {\r\n        const missing = [];\r\n        if (!hasPO) missing.push(__(\"commande d’achat manquante\"));\r\n        if (!hasPI) missing.push(__(\"facture d’achat manquante\"));\r\n        if (!itemsOk) missing.push(__(\"There are missed items\"));\r\n        frm.dashboard.set_headline(__(\"⛔ Incomplet: {0}\", [missing.join(\" • \")]));\r\n    }\r\n}\r\n\r\n\r\nfunction export_child_table(frm) {\r\n    let rows = frm.doc.items || [];\r\n    if (!rows.length) {\r\n        frappe.msgprint(\"No rows to export.\");\r\n        return;\r\n    }\r\n\r\n    // Pick fields to export\r\n    const headers = [\"Item\", \"Sold\", \"Found\", \"Alter\", \"Not Found\"];\r\n    const keys    = [\"item\", \"sold\", \"found\", \"alter\", \"not_found\"];\r\n\r\n    // Build CSV\r\n    let csv = headers.join(\",\") + \"\\n\";\r\n    rows.forEach(r => {\r\n        csv += keys.map(k => `\"${r[k] ?? \"\"}\"`).join(\",\") + \"\\n\";\r\n    });\r\n\r\n    // Download CSV\r\n    const blob = new Blob([csv], { type: \"text/csv;charset=utf-8;\" });\r\n    const link = document.createElement(\"a\");\r\n    link.href = URL.createObjectURL(blob);\r\n    link.download = `${frm.doc.name || \"table_export\"}.csv`;\r\n    link.click();\r\n}\r\n\r\n\r\nfunction install_overstock_css() {\r\n  frappe.dom.set_style(`\r\n    /* whole row turns light red when it has class \"overstock\" */\r\n    .grid-row.overstock {\r\n      background: #faa7a7 !important;\r\n    }\r\n  `, \"buy-the-sold-overstock-css\");\r\n}\r\n\r\nfunction colorize_items_grid(frm) {\r\n  const grid = frm.fields_dict[\"items\"]?.grid;\r\n  if (!grid) return;\r\n\r\n  (grid.grid_rows || []).forEach(gr => {\r\n    const d = gr.doc || {};\r\n    const onStock  = parseFloat(d.on_stock ?? 0);\r\n    const bestSell = parseFloat(d.best_sell ?? 0);\r\n    $(gr.wrapper).toggleClass(\"overstock\", onStock > bestSell);\r\n  });\r\n}\r\n\r\n/**\r\n * Attach strong hooks to keep row coloring after pagination/sort/refresh.\r\n * Use once per form instance.\r\n */\r\nfunction attach_items_grid_hooks(frm) {\r\n  const grid = frm.fields_dict?.items?.grid;\r\n  if (!grid || grid.__colorHooksAttached) return;\r\n\r\n  install_overstock_css();\r\n\r\n  // 1) Hook grid.refresh → repaint after render\r\n  if (typeof grid.refresh === \"function\" && !grid.__orig_refresh) {\r\n    grid.__orig_refresh = grid.refresh.bind(grid);\r\n    grid.refresh = function () {\r\n      const ret = grid.__orig_refresh(...arguments);\r\n      requestAnimationFrame(() => colorize_items_grid(frm));\r\n      return ret;\r\n    };\r\n  }\r\n\r\n  // 2) Hook grid.refresh_row → repaint after partial updates\r\n  if (typeof grid.refresh_row === \"function\" && !grid.__orig_refresh_row) {\r\n    grid.__orig_refresh_row = grid.refresh_row.bind(grid);\r\n    grid.refresh_row = function () {\r\n      const ret = grid.__orig_refresh_row(...arguments);\r\n      requestAnimationFrame(() => colorize_items_grid(frm));\r\n      return ret;\r\n    };\r\n  }\r\n\r\n  // 3) Listen to pagination buttons (varies by Frappe versions/themes)\r\n  const $w = $(grid.wrapper);\r\n  $w.on(\"click\", \".grid-pagination .btn, .grid-footer .btn, .btn-paging\", () => {\r\n    requestAnimationFrame(() => colorize_items_grid(frm));\r\n  });\r\n\r\n  // 4) MutationObserver backup (covers DOM swaps/reclasses)\r\n  const bodyEl =\r\n    $w.find(\".grid-body .rows\")[0] || $w.find(\".grid-body\")[0] || $w[0];\r\n\r\n  if (bodyEl) {\r\n    const observer = new MutationObserver(() => {\r\n      colorize_items_grid(frm);\r\n    });\r\n    observer.observe(bodyEl, {\r\n      childList: true,\r\n      subtree: true,\r\n      attributes: true,\r\n      attributeFilter: [\"class\", \"style\"],\r\n    });\r\n    grid.__colorObserver = observer;\r\n  }\r\n\r\n  grid.__colorHooksAttached = true;\r\n\r\n  // First paint (if rows visible)\r\n  requestAnimationFrame(() => colorize_items_grid(frm));\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "CTN Transfer Piece",
  "enabled": 1,
  "modified": "2025-09-09 00:24:30.090032",
  "module": "CTN Management",
  "name": "CTN Transfer Piece",
  "script": "frappe.ui.form.on('CTN Transfer Piece', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tcompany(frm){\n\t    frm.set_value('from' , '');\n\t    frm.set_value('to' , '');\n\t    frm.set_query('from' , function(){\n\t        return {filters:{company:frm.doc.company}}\n\t    })\n\t    frm.set_query('to' , function(){\n\t        return {filters:{company:frm.doc.company}}\n\t    })\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Brand",
  "enabled": 1,
  "modified": "2025-09-11 01:20:38.926973",
  "module": "POS AR",
  "name": "Brand - client script",
  "script": "frappe.ui.form.on('Brand', {\n\trefresh(frm) {\n        frm.set_query(\"custom_father\", function() {\n            return { filters: { custom_root: 1 } };\n        });\n\t}\n})",
  "view": "Form"
 }
]